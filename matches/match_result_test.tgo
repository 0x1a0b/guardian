/*
package matches

import (
	"testing"
	"time"
)

func TestNewMatchResult(t *testing.T) {
	matchResultMatch := NewMatchResult(true)
	matchResultNotMatch := NewMatchResult(false)

	if matchResultMatch != nil && matchResultMatch.IsMatched {
		t.Logf("NewMatchResult(\"true\") PASSED got %v.",
			matchResultMatch)
	} else {
		t.Errorf("NewMatchResult(\"true\") FAILED got %v.",
			matchResultMatch)
	}

	if matchResultNotMatch != nil && !matchResultNotMatch.IsMatched {
		t.Logf("NewMatchResult(\"false\") PASSED got %v.",
			matchResultNotMatch)
	} else {
		t.Errorf("NewMatchResult(\"false\") FAILED got %v.",
			matchResultNotMatch)
	}
}

func TestNewFirewallMatchResult(t *testing.T) {
	fwMatchResultMatch := NewFirewallMatchResult(&FirewallRule{}, true)
	fwMatchResultNotMatch := NewFirewallMatchResult(&FirewallRule{}, false)

	if fwMatchResultMatch != nil && fwMatchResultMatch.IsMatched {
		t.Logf("NewFirewallMatchResult(\"true\") PASSED got %v.",
			fwMatchResultMatch)
	} else {
		t.Errorf("NewFirewallMatchResult(\"true\") FAILED got %v.",
			fwMatchResultMatch)
	}

	if fwMatchResultNotMatch != nil && !fwMatchResultNotMatch.IsMatched {
		t.Logf("NewFirewallMatchResult(\"false\") PASSED got %v.",
			fwMatchResultNotMatch)
	} else {
		t.Errorf("NewFirewallMatchResult(\"false\") FAILED got %v.",
			fwMatchResultNotMatch)
	}
}

func TestTime(t *testing.T) {
	matchResult := NewMatchResult(true)
	startTime := time.Now()

	time.Sleep(1 * time.Second)

	result := matchResult.Time(startTime)

	if result.Elapsed >= 1000 {
		t.Logf("Time(\"%v\") PASSED got %v.",
			startTime, result.Elapsed)
	} else {
		t.Errorf("Time(\"%v\") FAILED got %v.",
			startTime, result.Elapsed)
	}
}

func TestAppend(t *testing.T) {
	matchResult := NewMatchResult(true)

	result := matchResult.Append(&PayloadData{Action: "DATA1"}).Append(&PayloadData{Action: "DATA2"})

	if len(result.MatchedPayloads) == 2 {
		t.Logf("Append(\"%v\") PASSED got %v.",
			result, len(result.MatchedPayloads))
	} else {
		t.Errorf("Append(\"%v\") FAILED got %v.",
			result, len(result.MatchedPayloads))
	}
}

func TestSetMatch(t *testing.T) {
	matchResultNotMatch := NewMatchResult(false)

	if matchResultNotMatch != nil && !matchResultNotMatch.IsMatched {
		t.Logf("NewMatchResult(\"false\") PASSED got %v.",
			matchResultNotMatch)
	} else {
		t.Errorf("NewMatchResult(\"false\") FAILED got %v.",
			matchResultNotMatch)
	}

	matchResultMatch := matchResultNotMatch.SetMatch(true)

	if matchResultMatch != nil && matchResultMatch.IsMatched {
		t.Logf("SetMatch(\"true\") PASSED got %v.",
			matchResultMatch)
	} else {
		t.Errorf("SetMatch(\"true\") FAILED got %v.",
			matchResultMatch)
	}
}

func TestFirewallMatchTime(t *testing.T) {
	matchResult := NewFirewallMatchResult(&FirewallRule{}, true)
	startTime := time.Now()

	time.Sleep(1 * time.Second)

	result := matchResult.Time(startTime)

	if result.Elapsed >= 1000 {
		t.Logf("Time(\"%v\") PASSED got %v.",
			startTime, result.Elapsed)
	} else {
		t.Errorf("Time(\"%v\") FAILED got %v.",
			startTime, result.Elapsed)
	}
}
*/